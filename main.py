import os
import telebot
from telebot import types
from google.auth.transport.requests import Request
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow
import gspread

# Configuration and global variables
bot_token = '6127346910:AAEavBl4k8mylFzHyoR2JxF7lk1H7NRVlM8'
spreadsheet_id = '13Vp_FUcSIwrWYanqTTvxX8EhAGHInniL6Lv7T_nXUBY'
sheet_range = '–õ–∏—Å—Ç1!A:E'

SCOPES = ["https://www.googleapis.com/auth/spreadsheets"]
questions = [
    "1) –ú–∞—Ä–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:",
    "2) –í–µ—Å –∞–≤—Ç–æ–º–æ–±–∏–ª—è:",
    "3) –°–∫–æ–ª—å–∫–æ –∫–æ–ª–µ—Å –∫—Ä—É—Ç–∏—Ç—Å—è:",
    "4) –ê–¥—Ä–µ—Å –æ—Ç–∫—É–¥–∞ –∑–∞–±—Ä–∞—Ç—å:",
    "5) –ê–¥—Ä–µ—Å –∫—É–¥–∞ –æ—Ç–≤–µ–∑—Ç–∏:",
    "6) –§–ò–û –∑–∞–∫–∞–∑—á–∏–∫–∞:",
    "7) –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:"
]
user_data = {}
current_question = 0

bot = telebot.TeleBot(bot_token)


# Google Sheets authentication
def authenticate_google_sheets():
    creds = None
    if os.path.exists("token.json"):
        creds = Credentials.from_authorized_user_file("token.json", SCOPES)
    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            creds.refresh(Request())
        else:
            flow = InstalledAppFlow.from_client_secrets_file("credentials.json", SCOPES)
            creds = flow.run_local_server(port=0)
        with open("token.json", "w") as token:
            token.write(creds.to_json())
    return creds


# Write data to Google Sheets
def write_to_google_sheets(data):
    try:
        creds = authenticate_google_sheets()
        gc = gspread.authorize(creds)
        worksheet = gc.open_by_key(spreadsheet_id).sheet1
        worksheet.append_row(list(data.values()))
    except Exception as e:
        print(e)


# Bot message handlers
@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("–í—ã–∑–≤–∞—Ç—å —ç–≤–∞–∫—É–∞—Ç–æ—Ä!")
    markup.add(btn1)
    bot.send_message(message.chat.id, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫!", reply_markup=markup)


def ask_next_question(chat_id):
    global current_question
    if current_question < len(questions):
        bot.send_message(chat_id, questions[current_question])
        current_question += 1
    else:
        write_to_google_sheets(user_data)
        bot.send_message(chat_id, "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –∏ –±—ã–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –≤ —Å–ª—É–∂–±—É –ø–æ–º–æ—â–∏!üëçüëçüëç –í —Ç–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∏–Ω—É—Ç —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞!ü§ùüòâ")
        current_question = 0
        user_data.clear()


@bot.message_handler(func=lambda message: True)
def handle_message(message):
    global current_question
    if message.text == "–í—ã–∑–≤–∞—Ç—å —ç–≤–∞–∫—É–∞—Ç–æ—Ä!":
        ask_next_question(message.chat.id)
    elif 0 < current_question <= len(questions):
        user_data[questions[current_question - 1]] = message.text
        ask_next_question(message.chat.id)


if __name__ == '__main__':
    bot.polling(none_stop=True, interval=0, timeout=10)
